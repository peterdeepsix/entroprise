{"ast":null,"code":"import React,{useEffect,useState,useMemo}from\"react\";import firebase from\"gatsby-plugin-firebase\";var AuthLayout=function AuthLayout(_ref){var children=_ref.children;var auth=firebase.auth();var rtdb=firebase.database();var firestoreRef=firebase.firestore();var firestoreUsersRef=firestoreRef.collection(\"users\");var isOnlineForDatabase={state:\"online\",last_changed:firebase.database.ServerValue.TIMESTAMP};var isOnlineForFirestore={status:{state:\"online\",last_changed:firebase.firestore.FieldValue.serverTimestamp()}};var isOfflineForDatabase={state:\"offline\",last_changed:firebase.database.ServerValue.TIMESTAMP};var isOfflineForFirestore={status:{state:\"offline\",last_changed:firebase.firestore.FieldValue.serverTimestamp()}};auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);auth.onAuthStateChanged(function(user){console.log(\"onAuthStateChange\",user);if(user){console.log(\"AuthLayout, onAuthStateChanged, user, logLoot()\");var firestoreUserStatusRef=firestoreRef.doc(\"users/\"+user.uid+\"/\");firestoreUserStatusRef.set({displayName:user.displayName,email:user.email,emailVerified:user.emailVerified,isAnonymous:user.isAnonymous,phoneNumber:user.phoneNumber,photoURL:user.photoURL,providerId:user.providerId,refreshToken:user.refreshToken,uid:user.uid,status:isOnlineForFirestore.status},{merge:true}).catch(function(error){console.log(error.code);console.log(error.message);});}if(!user){console.log(\"AuthLayout, onAuthStateChanged, !user, signInAnonymously()\");firebase.auth().signInAnonymously().then(function(result){firestoreUsersRef.doc(result.user.uid).set({displayName:result.user.displayName,email:result.user.email,emailVerified:result.user.emailVerified,isAnonymous:result.user.isAnonymous,phoneNumber:result.user.phoneNumber,photoURL:result.user.photoURL,providerId:result.user.providerId,refreshToken:result.user.refreshToken,uid:result.user.uid},{merge:true});}).catch(function(error){console.log(error.code);console.log(error.message);});}});rtdb.ref(\".info/connected\").on(\"value\",function(snapshot){console.log(\"AuthLayout, rtdb.ref(info/connected).on\");if(auth.currentUser){var uid=auth.currentUser.uid;var userStatusDatabaseRef=rtdb.ref(\"/status/\"+uid);var userStatusFirestoreRef=firestoreRef.doc(\"users/\"+uid+\"/\");if(snapshot.val()===false){console.log(\"RTDB snapshot false\");userStatusFirestoreRef.set(isOfflineForFirestore,{merge:true});return;}userStatusDatabaseRef.onDisconnect().set(isOfflineForDatabase).then(function(){console.log(\"onDisconnect\");userStatusDatabaseRef.set(isOnlineForDatabase);userStatusFirestoreRef.set(isOnlineForFirestore,{merge:true});});}});return React.createElement(React.Fragment,null,children);};export default AuthLayout;","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/src/layouts/AuthLayout.js"],"names":["React","useEffect","useState","useMemo","firebase","AuthLayout","children","auth","rtdb","database","firestoreRef","firestore","firestoreUsersRef","collection","isOnlineForDatabase","state","last_changed","ServerValue","TIMESTAMP","isOnlineForFirestore","status","FieldValue","serverTimestamp","isOfflineForDatabase","isOfflineForFirestore","setPersistence","Auth","Persistence","LOCAL","onAuthStateChanged","user","console","log","firestoreUserStatusRef","doc","uid","set","displayName","email","emailVerified","isAnonymous","phoneNumber","photoURL","providerId","refreshToken","merge","catch","error","code","message","signInAnonymously","then","result","ref","on","snapshot","currentUser","userStatusDatabaseRef","userStatusFirestoreRef","val","onDisconnect"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\"\r\nimport firebase from \"gatsby-plugin-firebase\"\r\n\r\nconst AuthLayout = ({ children }) => {\r\n  const auth = firebase.auth()\r\n  const rtdb = firebase.database()\r\n  const firestoreRef = firebase.firestore()\r\n  const firestoreUsersRef = firestoreRef.collection(\"users\")\r\n\r\n  // RTDB online state\r\n  const isOnlineForDatabase = {\r\n    state: \"online\",\r\n    last_changed: firebase.database.ServerValue.TIMESTAMP,\r\n  }\r\n  // Firestore online state\r\n  const isOnlineForFirestore = {\r\n    status: {\r\n      state: \"online\",\r\n      last_changed: firebase.firestore.FieldValue.serverTimestamp(),\r\n    },\r\n  }\r\n  // RTDB offline state\r\n  const isOfflineForDatabase = {\r\n    state: \"offline\",\r\n    last_changed: firebase.database.ServerValue.TIMESTAMP,\r\n  }\r\n  // Firestore offline state\r\n  const isOfflineForFirestore = {\r\n    status: {\r\n      state: \"offline\",\r\n      last_changed: firebase.firestore.FieldValue.serverTimestamp(),\r\n    },\r\n  }\r\n\r\n  // Config auth persistence\r\n  auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n\r\n  // listen for auth change\r\n  auth.onAuthStateChanged(user => {\r\n    console.log(\"onAuthStateChange\", user)\r\n    if (user) {\r\n      console.log(\"AuthLayout, onAuthStateChanged, user, logLoot()\")\r\n      const firestoreUserStatusRef = firestoreRef.doc(`users/${user.uid}/`)\r\n      firestoreUserStatusRef\r\n        .set(\r\n          {\r\n            displayName: user.displayName,\r\n            email: user.email,\r\n            emailVerified: user.emailVerified,\r\n            isAnonymous: user.isAnonymous,\r\n            phoneNumber: user.phoneNumber,\r\n            photoURL: user.photoURL,\r\n            providerId: user.providerId,\r\n            refreshToken: user.refreshToken,\r\n            uid: user.uid,\r\n            status: isOnlineForFirestore.status,\r\n          },\r\n          { merge: true }\r\n        )\r\n        .catch(error => {\r\n          console.log(error.code)\r\n          console.log(error.message)\r\n        })\r\n    }\r\n    if (!user) {\r\n      console.log(\"AuthLayout, onAuthStateChanged, !user, signInAnonymously()\")\r\n      firebase\r\n        .auth()\r\n        .signInAnonymously()\r\n        .then(result => {\r\n          firestoreUsersRef.doc(result.user.uid).set(\r\n            {\r\n              displayName: result.user.displayName,\r\n              email: result.user.email,\r\n              emailVerified: result.user.emailVerified,\r\n              isAnonymous: result.user.isAnonymous,\r\n              phoneNumber: result.user.phoneNumber,\r\n              photoURL: result.user.photoURL,\r\n              providerId: result.user.providerId,\r\n              refreshToken: result.user.refreshToken,\r\n              uid: result.user.uid,\r\n            },\r\n            { merge: true }\r\n          )\r\n        })\r\n        .catch(error => {\r\n          console.log(error.code)\r\n          console.log(error.message)\r\n        })\r\n    }\r\n  })\r\n\r\n  // listen for changes in RTDB active connections and update RTDB and Firestore\r\n  rtdb.ref(\".info/connected\").on(\"value\", snapshot => {\r\n    console.log(\"AuthLayout, rtdb.ref(info/connected).on\")\r\n\r\n    // listen for disconnect to RTDB if user\r\n    if (auth.currentUser) {\r\n      const uid = auth.currentUser.uid\r\n      const userStatusDatabaseRef = rtdb.ref(\"/status/\" + uid)\r\n      const userStatusFirestoreRef = firestoreRef.doc(`users/${uid}/`)\r\n\r\n      // IF RTDB \".info/connected\" is false then set Firestore to offline\r\n      if (snapshot.val() === false) {\r\n        console.log(\"RTDB snapshot false\")\r\n        userStatusFirestoreRef.set(isOfflineForFirestore, { merge: true })\r\n        return\r\n      }\r\n\r\n      // when RTDB disconnects set RTDB reference to offline\r\n      // then set Firestore and RTDB references to online upon reconnect\r\n      userStatusDatabaseRef\r\n        .onDisconnect()\r\n        .set(isOfflineForDatabase)\r\n        .then(() => {\r\n          console.log(\"onDisconnect\")\r\n          userStatusDatabaseRef.set(isOnlineForDatabase)\r\n          userStatusFirestoreRef.set(isOnlineForFirestore, { merge: true })\r\n        })\r\n    }\r\n  })\r\n\r\n  return <>{children}</>\r\n}\r\n\r\nexport default AuthLayout\r\n"]},"metadata":{},"sourceType":"module"}