{"ast":null,"code":"import hyphenateStyleName from'hyphenate-style-name';import mapKeyValue from\"../../modules/mapKeyValue\";import normalizeValue from\"./normalizeValue\";import prefixStyles from\"../../modules/prefixStyles\";var createDeclarationString=function createDeclarationString(prop,val){var name=hyphenateStyleName(prop);var value=normalizeValue(prop,val);if(Array.isArray(val)){return val.map(function(v){return name+':'+v;}).join(';');}return name+':'+value;};var createRuleBlock=function createRuleBlock(style){return mapKeyValue(prefixStyles(style),createDeclarationString).sort().join(';');};export default createRuleBlock;","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/node_modules/react-web-gifted-chat/node_modules/react-native-web/dist/exports/StyleSheet/createRuleBlock.js"],"names":["hyphenateStyleName","mapKeyValue","normalizeValue","prefixStyles","createDeclarationString","prop","val","name","value","Array","isArray","map","v","join","createRuleBlock","style","sort"],"mappings":"AASA,MAAOA,CAAAA,kBAAP,KAA+B,sBAA/B,CACA,MAAOC,CAAAA,WAAP,iCACA,MAAOC,CAAAA,cAAP,wBACA,MAAOC,CAAAA,YAAP,kCAEA,GAAIC,CAAAA,uBAAuB,CAAG,QAASA,CAAAA,uBAAT,CAAiCC,IAAjC,CAAuCC,GAAvC,CAA4C,CACxE,GAAIC,CAAAA,IAAI,CAAGP,kBAAkB,CAACK,IAAD,CAA7B,CACA,GAAIG,CAAAA,KAAK,CAAGN,cAAc,CAACG,IAAD,CAAOC,GAAP,CAA1B,CACA,GAAIG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,CAAwB,CACtB,MAAOA,CAAAA,GAAG,CAACK,GAAJ,CAAQ,SAAUC,CAAV,CAAa,CAC1B,MAAOL,CAAAA,IAAI,CAAG,GAAP,CAAaK,CAApB,CACD,CAFM,EAEJC,IAFI,CAEC,GAFD,CAAP,CAGD,CACD,MAAON,CAAAA,IAAI,CAAG,GAAP,CAAaC,KAApB,CACD,CATD,CAiBA,GAAIM,CAAAA,eAAe,CAAG,QAASA,CAAAA,eAAT,CAAyBC,KAAzB,CAAgC,CACpD,MAAOd,CAAAA,WAAW,CAACE,YAAY,CAACY,KAAD,CAAb,CAAsBX,uBAAtB,CAAX,CAA0DY,IAA1D,GAAiEH,IAAjE,CAAsE,GAAtE,CAAP,CACD,CAFD,CAIA,cAAeC,CAAAA,eAAf","sourcesContent":["/**\n * Copyright (c) 2016-present, Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nimport hyphenateStyleName from 'hyphenate-style-name';\nimport mapKeyValue from '../../modules/mapKeyValue';\nimport normalizeValue from './normalizeValue';\nimport prefixStyles from '../../modules/prefixStyles';\n\nvar createDeclarationString = function createDeclarationString(prop, val) {\n  var name = hyphenateStyleName(prop);\n  var value = normalizeValue(prop, val);\n  if (Array.isArray(val)) {\n    return val.map(function (v) {\n      return name + ':' + v;\n    }).join(';');\n  }\n  return name + ':' + value;\n};\n\n/**\n * Generates valid CSS rule body from a JS object\n *\n * createRuleBlock({ width: 20, color: 'blue' });\n * // => 'color:blue;width:20px'\n */\nvar createRuleBlock = function createRuleBlock(style) {\n  return mapKeyValue(prefixStyles(style), createDeclarationString).sort().join(';');\n};\n\nexport default createRuleBlock;"]},"metadata":{},"sourceType":"module"}