{"ast":null,"code":"function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}import InteractionManager from\"../../../exports/InteractionManager\";var Batchinator=function(){function Batchinator(callback,delayMS){_classCallCheck(this,Batchinator);this._delay=delayMS;this._callback=callback;}Batchinator.prototype.dispose=function dispose(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{abort:false};if(this._taskHandle){this._taskHandle.cancel();if(!options.abort){this._callback();}this._taskHandle=null;}};Batchinator.prototype.schedule=function schedule(){var _this=this;if(this._taskHandle){return;}var timeoutHandle=setTimeout(function(){_this._taskHandle=InteractionManager.runAfterInteractions(function(){_this._taskHandle=null;_this._callback();});},this._delay);this._taskHandle={cancel:function cancel(){return clearTimeout(timeoutHandle);}};};return Batchinator;}();export default Batchinator;","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/node_modules/react-web-gifted-chat/node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js"],"names":["_classCallCheck","instance","Constructor","TypeError","InteractionManager","Batchinator","callback","delayMS","_delay","_callback","prototype","dispose","options","arguments","length","undefined","abort","_taskHandle","cancel","schedule","_this","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout"],"mappings":"AAAA,QAASA,CAAAA,eAAT,CAAyBC,QAAzB,CAAmCC,WAAnC,CAAgD,CAAE,GAAI,EAAED,QAAQ,WAAYC,CAAAA,WAAtB,CAAJ,CAAwC,CAAE,KAAM,IAAIC,CAAAA,SAAJ,CAAc,mCAAd,CAAN,CAA2D,CAAE,CAWzJ,MAAOC,CAAAA,kBAAP,2CAyBA,GAAIC,CAAAA,WAAW,CAAG,UAAY,CAC5B,QAASA,CAAAA,WAAT,CAAqBC,QAArB,CAA+BC,OAA/B,CAAwC,CACtCP,eAAe,CAAC,IAAD,CAAOK,WAAP,CAAf,CAEA,KAAKG,MAAL,CAAcD,OAAd,CACA,KAAKE,SAAL,CAAiBH,QAAjB,CACD,CASDD,WAAW,CAACK,SAAZ,CAAsBC,OAAtB,CAAgC,QAASA,CAAAA,OAAT,EAAmB,CACjD,GAAIC,CAAAA,OAAO,CAAGC,SAAS,CAACC,MAAV,CAAmB,CAAnB,EAAwBD,SAAS,CAAC,CAAD,CAAT,GAAiBE,SAAzC,CAAqDF,SAAS,CAAC,CAAD,CAA9D,CAAoE,CAAEG,KAAK,CAAE,KAAT,CAAlF,CAEA,GAAI,KAAKC,WAAT,CAAsB,CACpB,KAAKA,WAAL,CAAiBC,MAAjB,GACA,GAAI,CAACN,OAAO,CAACI,KAAb,CAAoB,CAClB,KAAKP,SAAL,GACD,CACD,KAAKQ,WAAL,CAAmB,IAAnB,CACD,CACF,CAVD,CAYAZ,WAAW,CAACK,SAAZ,CAAsBS,QAAtB,CAAiC,QAASA,CAAAA,QAAT,EAAoB,CACnD,GAAIC,CAAAA,KAAK,CAAG,IAAZ,CAEA,GAAI,KAAKH,WAAT,CAAsB,CACpB,OACD,CACD,GAAII,CAAAA,aAAa,CAAGC,UAAU,CAAC,UAAY,CACzCF,KAAK,CAACH,WAAN,CAAoBb,kBAAkB,CAACmB,oBAAnB,CAAwC,UAAY,CAGtEH,KAAK,CAACH,WAAN,CAAoB,IAApB,CACAG,KAAK,CAACX,SAAN,GACD,CALmB,CAApB,CAMD,CAP6B,CAO3B,KAAKD,MAPsB,CAA9B,CAQA,KAAKS,WAAL,CAAmB,CAAEC,MAAM,CAAE,QAASA,CAAAA,MAAT,EAAkB,CAC3C,MAAOM,CAAAA,YAAY,CAACH,aAAD,CAAnB,CACD,CAFgB,CAAnB,CAGD,CAjBD,CAmBA,MAAOhB,CAAAA,WAAP,CACD,CA/CiB,EAAlB,CAiDA,cAAeA,CAAAA,WAAf","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport InteractionManager from '../../../exports/InteractionManager';\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\n\nvar Batchinator = function () {\n  function Batchinator(callback, delayMS) {\n    _classCallCheck(this, Batchinator);\n\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  Batchinator.prototype.dispose = function dispose() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { abort: false };\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  };\n\n  Batchinator.prototype.schedule = function schedule() {\n    var _this = this;\n\n    if (this._taskHandle) {\n      return;\n    }\n    var timeoutHandle = setTimeout(function () {\n      _this._taskHandle = InteractionManager.runAfterInteractions(function () {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        _this._taskHandle = null;\n        _this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = { cancel: function cancel() {\n        return clearTimeout(timeoutHandle);\n      } };\n  };\n\n  return Batchinator;\n}();\n\nexport default Batchinator;"]},"metadata":{},"sourceType":"module"}