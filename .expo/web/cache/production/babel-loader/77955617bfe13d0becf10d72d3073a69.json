{"ast":null,"code":"import ExecutionEnvironment from'fbjs/lib/ExecutionEnvironment';import findIndex from'array-find-index';import invariant from'fbjs/lib/invariant';var connection=ExecutionEnvironment.canUseDOM&&(window.navigator.connection||window.navigator.mozConnection||window.navigator.webkitConnection);var getConnectionInfoObject=function getConnectionInfoObject(){var result={effectiveType:'unknown',type:'unknown'};if(!connection){return result;}for(var prop in connection){var value=connection[prop];if(typeof value!=='function'&&value!=null){result[prop]=value;}}return result;};var eventTypesMap={change:'change',connectionChange:'change'};var eventTypes=Object.keys(eventTypesMap);var connectionListeners=[];var netInfoListeners=[];var NetInfo={addEventListener:function addEventListener(type,handler){invariant(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: \"%s\"',type);if(type==='change'){console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');}if(!connection){console.error('Network Connection API is not supported. Not listening for connection type changes.');return{remove:function remove(){}};}var wrappedHandler=function wrappedHandler(){return handler(getConnectionInfoObject());};netInfoListeners.push([handler,wrappedHandler]);connection.addEventListener(eventTypesMap[type],wrappedHandler);return{remove:function remove(){return NetInfo.removeEventListener(eventTypesMap[type],handler);}};},removeEventListener:function removeEventListener(type,handler){invariant(eventTypes.indexOf(type)!==-1,'Trying to unsubscribe from unknown event: \"%s\"',type);if(type==='change'){console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');}var listenerIndex=findIndex(netInfoListeners,function(pair){return pair[0]===handler;});invariant(listenerIndex!==-1,'Trying to remove NetInfo listener for unregistered handler');var _netInfoListeners$lis=netInfoListeners[listenerIndex],wrappedHandler=_netInfoListeners$lis[1];connection.removeEventListener(eventTypesMap[type],wrappedHandler);netInfoListeners.splice(listenerIndex,1);},fetch:function fetch(){console.warn('`fetch` is deprecated. Use `getConnectionInfo` instead.');return new Promise(function(resolve,reject){try{resolve(connection.type);}catch(err){resolve('unknown');}});},getConnectionInfo:function getConnectionInfo(){return new Promise(function(resolve,reject){resolve(getConnectionInfoObject());});},isConnected:{addEventListener:function addEventListener(type,handler){invariant(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: \"%s\"',type);if(type==='change'){console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');}var onlineCallback=function onlineCallback(){return handler(true);};var offlineCallback=function offlineCallback(){return handler(false);};connectionListeners.push([handler,onlineCallback,offlineCallback]);window.addEventListener('online',onlineCallback,false);window.addEventListener('offline',offlineCallback,false);return{remove:function remove(){return NetInfo.isConnected.removeEventListener(eventTypesMap[type],handler);}};},removeEventListener:function removeEventListener(type,handler){invariant(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: \"%s\"',type);if(type==='change'){console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');}var listenerIndex=findIndex(connectionListeners,function(pair){return pair[0]===handler;});invariant(listenerIndex!==-1,'Trying to remove NetInfo connection listener for unregistered handler');var _connectionListeners$=connectionListeners[listenerIndex],onlineCallback=_connectionListeners$[1],offlineCallback=_connectionListeners$[2];window.removeEventListener('online',onlineCallback,false);window.removeEventListener('offline',offlineCallback,false);connectionListeners.splice(listenerIndex,1);},fetch:function fetch(){return new Promise(function(resolve,reject){try{resolve(window.navigator.onLine);}catch(err){resolve(true);}});}}};export default NetInfo;","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/node_modules/react-web-gifted-chat/node_modules/react-native-web/dist/exports/NetInfo/index.js"],"names":["ExecutionEnvironment","findIndex","invariant","connection","canUseDOM","window","navigator","mozConnection","webkitConnection","getConnectionInfoObject","result","effectiveType","type","prop","value","eventTypesMap","change","connectionChange","eventTypes","Object","keys","connectionListeners","netInfoListeners","NetInfo","addEventListener","handler","indexOf","console","warn","error","remove","wrappedHandler","push","removeEventListener","listenerIndex","pair","_netInfoListeners$lis","splice","fetch","Promise","resolve","reject","err","getConnectionInfo","isConnected","onlineCallback","offlineCallback","_connectionListeners$","onLine"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Nicolas Gallagher.\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\nimport findIndex from 'array-find-index';\nimport invariant from 'fbjs/lib/invariant';\n\nvar connection = ExecutionEnvironment.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection);\n\n// Prevent the underlying event handlers from leaking and include additional\n// properties available in browsers\nvar getConnectionInfoObject = function getConnectionInfoObject() {\n  var result = {\n    effectiveType: 'unknown',\n    type: 'unknown'\n  };\n  if (!connection) {\n    return result;\n  }\n  for (var prop in connection) {\n    var value = connection[prop];\n    if (typeof value !== 'function' && value != null) {\n      result[prop] = value;\n    }\n  }\n  return result;\n};\n\n// Map React Native events to browser equivalents\nvar eventTypesMap = {\n  change: 'change',\n  connectionChange: 'change'\n};\nvar eventTypes = Object.keys(eventTypesMap);\n\nvar connectionListeners = [];\nvar netInfoListeners = [];\n\n/**\n * Navigator online: https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n * Network Connection API: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    var wrappedHandler = function wrappedHandler() {\n      return handler(getConnectionInfoObject());\n    };\n    netInfoListeners.push([handler, wrappedHandler]);\n    connection.addEventListener(eventTypesMap[type], wrappedHandler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(eventTypesMap[type], handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to unsubscribe from unknown event: \"%s\"', type);\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    var listenerIndex = findIndex(netInfoListeners, function (pair) {\n      return pair[0] === handler;\n    });\n    invariant(listenerIndex !== -1, 'Trying to remove NetInfo listener for unregistered handler');\n    var _netInfoListeners$lis = netInfoListeners[listenerIndex],\n        wrappedHandler = _netInfoListeners$lis[1];\n\n    connection.removeEventListener(eventTypesMap[type], wrappedHandler);\n    netInfoListeners.splice(listenerIndex, 1);\n  },\n  fetch: function fetch() {\n    console.warn('`fetch` is deprecated. Use `getConnectionInfo` instead.');\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  getConnectionInfo: function getConnectionInfo() {\n    return new Promise(function (resolve, reject) {\n      resolve(getConnectionInfoObject());\n    });\n  },\n\n\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var onlineCallback = function onlineCallback() {\n        return handler(true);\n      };\n      var offlineCallback = function offlineCallback() {\n        return handler(false);\n      };\n      connectionListeners.push([handler, onlineCallback, offlineCallback]);\n\n      window.addEventListener('online', onlineCallback, false);\n      window.addEventListener('offline', offlineCallback, false);\n\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(eventTypesMap[type], handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var listenerIndex = findIndex(connectionListeners, function (pair) {\n        return pair[0] === handler;\n      });\n      invariant(listenerIndex !== -1, 'Trying to remove NetInfo connection listener for unregistered handler');\n      var _connectionListeners$ = connectionListeners[listenerIndex],\n          onlineCallback = _connectionListeners$[1],\n          offlineCallback = _connectionListeners$[2];\n\n\n      window.removeEventListener('online', onlineCallback, false);\n      window.removeEventListener('offline', offlineCallback, false);\n\n      connectionListeners.splice(listenerIndex, 1);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\n\nexport default NetInfo;"]},"metadata":{},"sourceType":"module"}