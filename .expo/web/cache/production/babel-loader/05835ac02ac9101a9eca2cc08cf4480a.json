{"ast":null,"code":"'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}import invariant from'fbjs/lib/invariant';import isEmpty from\"../isEmpty\";import warning from'fbjs/lib/warning';function defaultGetRowData(dataBlob,sectionID,rowID){return dataBlob[sectionID][rowID];}function defaultGetSectionHeaderData(dataBlob,sectionID){return dataBlob[sectionID];}var ListViewDataSource=function(){function ListViewDataSource(params){_classCallCheck(this,ListViewDataSource);invariant(params&&typeof params.rowHasChanged==='function','Must provide a rowHasChanged function.');this._rowHasChanged=params.rowHasChanged;this._getRowData=params.getRowData||defaultGetRowData;this._sectionHeaderHasChanged=params.sectionHeaderHasChanged;this._getSectionHeaderData=params.getSectionHeaderData||defaultGetSectionHeaderData;this._dataBlob=null;this._dirtyRows=[];this._dirtySections=[];this._cachedRowCount=0;this.rowIdentities=[];this.sectionIdentities=[];}ListViewDataSource.prototype.cloneWithRows=function cloneWithRows(dataBlob,rowIdentities){var rowIds=rowIdentities?[[].concat(rowIdentities)]:null;if(!this._sectionHeaderHasChanged){this._sectionHeaderHasChanged=function(){return false;};}return this.cloneWithRowsAndSections({s1:dataBlob},['s1'],rowIds);};ListViewDataSource.prototype.cloneWithRowsAndSections=function cloneWithRowsAndSections(dataBlob,sectionIdentities,rowIdentities){invariant(typeof this._sectionHeaderHasChanged==='function','Must provide a sectionHeaderHasChanged function with section data.');invariant(!sectionIdentities||!rowIdentities||sectionIdentities.length===rowIdentities.length,'row and section ids lengths must be the same');var newSource=new ListViewDataSource({getRowData:this._getRowData,getSectionHeaderData:this._getSectionHeaderData,rowHasChanged:this._rowHasChanged,sectionHeaderHasChanged:this._sectionHeaderHasChanged});newSource._dataBlob=dataBlob;if(sectionIdentities){newSource.sectionIdentities=sectionIdentities;}else{newSource.sectionIdentities=Object.keys(dataBlob);}if(rowIdentities){newSource.rowIdentities=rowIdentities;}else{newSource.rowIdentities=[];newSource.sectionIdentities.forEach(function(sectionID){newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));});}newSource._cachedRowCount=countRows(newSource.rowIdentities);newSource._calculateDirtyArrays(this._dataBlob,this.sectionIdentities,this.rowIdentities);return newSource;};ListViewDataSource.prototype.getRowCount=function getRowCount(){return this._cachedRowCount;};ListViewDataSource.prototype.getRowAndSectionCount=function getRowAndSectionCount(){return this._cachedRowCount+this.sectionIdentities.length;};ListViewDataSource.prototype.rowShouldUpdate=function rowShouldUpdate(sectionIndex,rowIndex){var needsUpdate=this._dirtyRows[sectionIndex][rowIndex];warning(needsUpdate!==undefined,'missing dirtyBit for section, row: '+sectionIndex+', '+rowIndex);return needsUpdate;};ListViewDataSource.prototype.getRowData=function getRowData(sectionIndex,rowIndex){var sectionID=this.sectionIdentities[sectionIndex];var rowID=this.rowIdentities[sectionIndex][rowIndex];warning(sectionID!==undefined&&rowID!==undefined,'rendering invalid section, row: '+sectionIndex+', '+rowIndex);return this._getRowData(this._dataBlob,sectionID,rowID);};ListViewDataSource.prototype.getRowIDForFlatIndex=function getRowIDForFlatIndex(index){var accessIndex=index;for(var ii=0;ii<this.sectionIdentities.length;ii++){if(accessIndex>=this.rowIdentities[ii].length){accessIndex-=this.rowIdentities[ii].length;}else{return this.rowIdentities[ii][accessIndex];}}return null;};ListViewDataSource.prototype.getSectionIDForFlatIndex=function getSectionIDForFlatIndex(index){var accessIndex=index;for(var ii=0;ii<this.sectionIdentities.length;ii++){if(accessIndex>=this.rowIdentities[ii].length){accessIndex-=this.rowIdentities[ii].length;}else{return this.sectionIdentities[ii];}}return null;};ListViewDataSource.prototype.getSectionLengths=function getSectionLengths(){var results=[];for(var ii=0;ii<this.sectionIdentities.length;ii++){results.push(this.rowIdentities[ii].length);}return results;};ListViewDataSource.prototype.sectionHeaderShouldUpdate=function sectionHeaderShouldUpdate(sectionIndex){var needsUpdate=this._dirtySections[sectionIndex];warning(needsUpdate!==undefined,'missing dirtyBit for section: '+sectionIndex);return needsUpdate;};ListViewDataSource.prototype.getSectionHeaderData=function getSectionHeaderData(sectionIndex){if(!this._getSectionHeaderData){return null;}var sectionID=this.sectionIdentities[sectionIndex];warning(sectionID!==undefined,'renderSection called on invalid section: '+sectionIndex);return this._getSectionHeaderData(this._dataBlob,sectionID);};ListViewDataSource.prototype._calculateDirtyArrays=function _calculateDirtyArrays(prevDataBlob,prevSectionIDs,prevRowIDs){var prevSectionsHash=keyedDictionaryFromArray(prevSectionIDs);var prevRowsHash={};for(var ii=0;ii<prevRowIDs.length;ii++){var sectionID=prevSectionIDs[ii];warning(!prevRowsHash[sectionID],'SectionID appears more than once: '+sectionID);prevRowsHash[sectionID]=keyedDictionaryFromArray(prevRowIDs[ii]);}this._dirtySections=[];this._dirtyRows=[];var dirty;for(var sIndex=0;sIndex<this.sectionIdentities.length;sIndex++){var sectionID=this.sectionIdentities[sIndex];dirty=!prevSectionsHash[sectionID];var sectionHeaderHasChanged=this._sectionHeaderHasChanged;if(!dirty&&sectionHeaderHasChanged){dirty=sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob,sectionID),this._getSectionHeaderData(this._dataBlob,sectionID));}this._dirtySections.push(!!dirty);this._dirtyRows[sIndex]=[];for(var rIndex=0;rIndex<this.rowIdentities[sIndex].length;rIndex++){var rowID=this.rowIdentities[sIndex][rIndex];dirty=!prevSectionsHash[sectionID]||!prevRowsHash[sectionID][rowID]||this._rowHasChanged(this._getRowData(prevDataBlob,sectionID,rowID),this._getRowData(this._dataBlob,sectionID,rowID));this._dirtyRows[sIndex].push(!!dirty);}}};return ListViewDataSource;}();function countRows(allRowIDs){var totalRows=0;for(var sectionIdx=0;sectionIdx<allRowIDs.length;sectionIdx++){var rowIDs=allRowIDs[sectionIdx];totalRows+=rowIDs.length;}return totalRows;}function keyedDictionaryFromArray(arr){if(isEmpty(arr)){return{};}var result={};for(var ii=0;ii<arr.length;ii++){var key=arr[ii];warning(!result[key],'Value appears more than once in array: '+key);result[key]=true;}return result;}export default ListViewDataSource;","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/node_modules/react-web-gifted-chat/node_modules/react-native-web/dist/vendor/react-native/ListView/ListViewDataSource.js"],"names":["_classCallCheck","instance","Constructor","TypeError","invariant","isEmpty","warning","defaultGetRowData","dataBlob","sectionID","rowID","defaultGetSectionHeaderData","ListViewDataSource","params","rowHasChanged","_rowHasChanged","_getRowData","getRowData","_sectionHeaderHasChanged","sectionHeaderHasChanged","_getSectionHeaderData","getSectionHeaderData","_dataBlob","_dirtyRows","_dirtySections","_cachedRowCount","rowIdentities","sectionIdentities","prototype","cloneWithRows","rowIds","concat","cloneWithRowsAndSections","s1","length","newSource","Object","keys","forEach","push","countRows","_calculateDirtyArrays","getRowCount","getRowAndSectionCount","rowShouldUpdate","sectionIndex","rowIndex","needsUpdate","undefined","getRowIDForFlatIndex","index","accessIndex","ii","getSectionIDForFlatIndex","getSectionLengths","results","sectionHeaderShouldUpdate","prevDataBlob","prevSectionIDs","prevRowIDs","prevSectionsHash","keyedDictionaryFromArray","prevRowsHash","dirty","sIndex","rIndex","allRowIDs","totalRows","sectionIdx","rowIDs","arr","result","key"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ListViewDataSource\n * \n * @format\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from '../isEmpty';\nimport warning from 'fbjs/lib/warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListView.DataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\nvar ListViewDataSource = function () {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  function ListViewDataSource(params) {\n    _classCallCheck(this, ListViewDataSource);\n\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n\n    // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n\n\n  ListViewDataSource.prototype.cloneWithRows = function cloneWithRows(dataBlob, rowIdentities) {\n    var rowIds = rowIdentities ? [[].concat(rowIdentities)] : null;\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = function () {\n        return false;\n      };\n    }\n    return this.cloneWithRowsAndSections({ s1: dataBlob }, ['s1'], rowIds);\n  };\n\n  /**\n   * This performs the same function as the `cloneWithRows` function but here\n   * you also specify what your `sectionIdentities` are. If you don't care\n   * about sections you should safely be able to use `cloneWithRows`.\n   *\n   * `sectionIdentities` is an array of identifiers for sections.\n   * ie. ['s1', 's2', ...].  The identifiers should correspond to the keys or array indexes\n   * of the data you wish to include.  If not provided, it's assumed that the\n   * keys of dataBlob are the section identities.\n   *\n   * Note: this returns a new object!\n   *\n   * ```\n   * const dataSource = ds.cloneWithRowsAndSections({\n   *   addresses: ['row 1', 'row 2'],\n   *   phone_numbers: ['data 1', 'data 2'],\n   * }, ['phone_numbers']);\n   * ```\n   */\n\n\n  ListViewDataSource.prototype.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n    invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n\n    var newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged\n    });\n    newSource._dataBlob = dataBlob;\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(function (sectionID) {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n    return newSource;\n  };\n\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowCount` will return the number of rows in the filtered data source.\n   */\n\n\n  ListViewDataSource.prototype.getRowCount = function getRowCount() {\n    return this._cachedRowCount;\n  };\n\n  /**\n   * Returns the total number of rows in the data source (see `getRowCount` for how this is calculated) plus the number of sections in the data.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowAndSectionCount` will return the number of rows & sections in the filtered data source.\n   */\n\n\n  ListViewDataSource.prototype.getRowAndSectionCount = function getRowAndSectionCount() {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  };\n\n  /**\n   * Returns if the row is dirtied and needs to be rerendered\n   */\n\n\n  ListViewDataSource.prototype.rowShouldUpdate = function rowShouldUpdate(sectionIndex, rowIndex) {\n    var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n    return needsUpdate;\n  };\n\n  /**\n   * Gets the data required to render the row.\n   */\n\n\n  ListViewDataSource.prototype.getRowData = function getRowData(sectionIndex, rowIndex) {\n    var sectionID = this.sectionIdentities[sectionIndex];\n    var rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  };\n\n  /**\n   * Gets the rowID at index provided if the dataSource arrays were flattened,\n   * or null of out of range indexes.\n   */\n\n\n  ListViewDataSource.prototype.getRowIDForFlatIndex = function getRowIDForFlatIndex(index) {\n    var accessIndex = index;\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Gets the sectionID at index provided if the dataSource arrays were flattened,\n   * or null for out of range indexes.\n   */\n\n\n  ListViewDataSource.prototype.getSectionIDForFlatIndex = function getSectionIDForFlatIndex(index) {\n    var accessIndex = index;\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Returns an array containing the number of rows in each section\n   */\n\n\n  ListViewDataSource.prototype.getSectionLengths = function getSectionLengths() {\n    var results = [];\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n    return results;\n  };\n\n  /**\n   * Returns if the section header is dirtied and needs to be rerendered\n   */\n\n\n  ListViewDataSource.prototype.sectionHeaderShouldUpdate = function sectionHeaderShouldUpdate(sectionIndex) {\n    var needsUpdate = this._dirtySections[sectionIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n    return needsUpdate;\n  };\n\n  /**\n   * Gets the data required to render the section header\n   */\n\n\n  ListViewDataSource.prototype.getSectionHeaderData = function getSectionHeaderData(sectionIndex) {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n    var sectionID = this.sectionIdentities[sectionIndex];\n    warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  };\n\n  /**\n   * Private members and methods.\n   */\n\n  // These two 'protected' variables are accessed by ListView to iterate over\n  // the data in this class.\n\n\n  ListViewDataSource.prototype._calculateDirtyArrays = function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n    // construct a hashmap of the existing (old) id arrays\n    var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    var prevRowsHash = {};\n    for (var ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    }\n\n    // compare the 2 identity array and get the dirtied rows\n    this._dirtySections = [];\n    this._dirtyRows = [];\n\n    var dirty;\n    for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex];\n      // dirty if the sectionHeader is new or _sectionHasChanged is true\n      dirty = !prevSectionsHash[sectionID];\n      var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n      }\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n      for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n        var rowID = this.rowIdentities[sIndex][rIndex];\n        // dirty if the section is new, row is new or _rowHasChanged is true\n        dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  };\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n  var result = {};\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\n\nexport default ListViewDataSource;"]},"metadata":{},"sourceType":"module"}