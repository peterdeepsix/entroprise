{"ast":null,"code":"'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}import ListViewDataSource from\"../ListView/ListViewDataSource\";var SwipeableListViewDataSource=function(){function SwipeableListViewDataSource(params){var _this=this;_classCallCheck(this,SwipeableListViewDataSource);this._dataSource=new ListViewDataSource({getRowData:params.getRowData,getSectionHeaderData:params.getSectionHeaderData,rowHasChanged:function rowHasChanged(row1,row2){return row1.id!==_this._previousOpenRowID&&row2.id===_this._openRowID||row1.id===_this._previousOpenRowID&&row2.id!==_this._openRowID||params.rowHasChanged(row1,row2);},sectionHeaderHasChanged:params.sectionHeaderHasChanged});}SwipeableListViewDataSource.prototype.cloneWithRowsAndSections=function cloneWithRowsAndSections(dataBlob,sectionIdentities,rowIdentities){this._dataSource=this._dataSource.cloneWithRowsAndSections(dataBlob,sectionIdentities,rowIdentities);this._dataBlob=dataBlob;this.rowIdentities=this._dataSource.rowIdentities;this.sectionIdentities=this._dataSource.sectionIdentities;return this;};SwipeableListViewDataSource.prototype.getDataSource=function getDataSource(){return this._dataSource;};SwipeableListViewDataSource.prototype.getOpenRowID=function getOpenRowID(){return this._openRowID;};SwipeableListViewDataSource.prototype.getFirstRowID=function getFirstRowID(){if(this.rowIdentities){return this.rowIdentities[0]&&this.rowIdentities[0][0];}return Object.keys(this._dataBlob)[0];};SwipeableListViewDataSource.prototype.getLastRowID=function getLastRowID(){if(this.rowIdentities&&this.rowIdentities.length){var lastSection=this.rowIdentities[this.rowIdentities.length-1];if(lastSection&&lastSection.length){return lastSection[lastSection.length-1];}}return Object.keys(this._dataBlob)[this._dataBlob.length-1];};SwipeableListViewDataSource.prototype.setOpenRowID=function setOpenRowID(rowID){this._previousOpenRowID=this._openRowID;this._openRowID=rowID;this._dataSource=this._dataSource.cloneWithRowsAndSections(this._dataBlob,this.sectionIdentities,this.rowIdentities);return this;};return SwipeableListViewDataSource;}();export default SwipeableListViewDataSource;","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/node_modules/react-web-gifted-chat/node_modules/react-native-web/dist/vendor/react-native/SwipeableListView/SwipeableListViewDataSource.js"],"names":["_classCallCheck","instance","Constructor","TypeError","ListViewDataSource","SwipeableListViewDataSource","params","_this","_dataSource","getRowData","getSectionHeaderData","rowHasChanged","row1","row2","id","_previousOpenRowID","_openRowID","sectionHeaderHasChanged","prototype","cloneWithRowsAndSections","dataBlob","sectionIdentities","rowIdentities","_dataBlob","getDataSource","getOpenRowID","getFirstRowID","Object","keys","getLastRowID","length","lastSection","setOpenRowID","rowID"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule SwipeableListViewDataSource\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport ListViewDataSource from '../ListView/ListViewDataSource';\n\n/**\n * Data source wrapper around ListViewDataSource to allow for tracking of\n * which row is swiped open and close opened row(s) when another row is swiped\n * open.\n *\n * See https://github.com/facebook/react-native/pull/5602 for why\n * ListViewDataSource is not subclassed.\n */\n\nvar SwipeableListViewDataSource = function () {\n  function SwipeableListViewDataSource(params) {\n    var _this = this;\n\n    _classCallCheck(this, SwipeableListViewDataSource);\n\n    this._dataSource = new ListViewDataSource({\n      getRowData: params.getRowData,\n      getSectionHeaderData: params.getSectionHeaderData,\n      rowHasChanged: function rowHasChanged(row1, row2) {\n        /**\n         * Row needs to be re-rendered if its swiped open/close status is\n         * changed, or its data blob changed.\n         */\n        return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);\n      },\n      sectionHeaderHasChanged: params.sectionHeaderHasChanged\n    });\n  }\n\n  SwipeableListViewDataSource.prototype.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);\n\n    this._dataBlob = dataBlob;\n    this.rowIdentities = this._dataSource.rowIdentities;\n    this.sectionIdentities = this._dataSource.sectionIdentities;\n\n    return this;\n  };\n\n  // For the actual ListView to use\n\n\n  SwipeableListViewDataSource.prototype.getDataSource = function getDataSource() {\n    return this._dataSource;\n  };\n\n  SwipeableListViewDataSource.prototype.getOpenRowID = function getOpenRowID() {\n    return this._openRowID;\n  };\n\n  SwipeableListViewDataSource.prototype.getFirstRowID = function getFirstRowID() {\n    /**\n     * If rowIdentities is specified, find the first data row from there since\n     * we don't want to attempt to bounce section headers. If unspecified, find\n     * the first data row from _dataBlob.\n     */\n    if (this.rowIdentities) {\n      return this.rowIdentities[0] && this.rowIdentities[0][0];\n    }\n    return Object.keys(this._dataBlob)[0];\n  };\n\n  SwipeableListViewDataSource.prototype.getLastRowID = function getLastRowID() {\n    if (this.rowIdentities && this.rowIdentities.length) {\n      var lastSection = this.rowIdentities[this.rowIdentities.length - 1];\n      if (lastSection && lastSection.length) {\n        return lastSection[lastSection.length - 1];\n      }\n    }\n    return Object.keys(this._dataBlob)[this._dataBlob.length - 1];\n  };\n\n  SwipeableListViewDataSource.prototype.setOpenRowID = function setOpenRowID(rowID) {\n    this._previousOpenRowID = this._openRowID;\n    this._openRowID = rowID;\n\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n    return this;\n  };\n\n  return SwipeableListViewDataSource;\n}();\n\nexport default SwipeableListViewDataSource;"]},"metadata":{},"sourceType":"module"}