{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useEffect,useState,useRef}from\"react\";import ReactInterval from\"react-interval\";import useUserMedia from\"react-use-user-media\";import*as blazeface from\"@tensorflow-models/blazeface\";import{Box,Badge,Avatar,Card,CardContent,CardHeader,ListItem,ListItemText,ListItemAvatar}from\"@material-ui/core\";import{makeStyles,withStyles}from\"@material-ui/core/styles\";import IndefiniteLoading from\"src/components/loading/indefiniteLoading\";var useStyles=makeStyles(function(theme){return{root:{width:\"100%\"},video:{width:\"100%\"}};});var constraints={video:true,audio:false};var StyledBadge=withStyles(function(theme){return{badge:{backgroundColor:\"#44b700\",color:\"#44b700\",boxShadow:\"0 0 0 2px \"+theme.palette.background.paper,\"&::after\":{position:\"absolute\",top:0,left:0,width:\"100%\",height:\"100%\",borderRadius:\"50%\",animation:\"$ripple 1.2s infinite ease-in-out\",border:\"1px solid currentColor\",content:'\"\"'}},\"@keyframes ripple\":{\"0%\":{transform:\"scale(.8)\",opacity:1},\"100%\":{transform:\"scale(2.4)\",opacity:0}}};})(Badge);var TensorFlow=function TensorFlow(_ref){var user=_ref.user;var classes=useStyles();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isPredicting=_useState2[0],setIsPredicting=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),confidenceScore=_useState4[0],setConfidenceScore=_useState4[1];var _useUserMedia=useUserMedia(constraints),state=_useUserMedia.state,stream=_useUserMedia.stream;var videoRef=useRef();useEffect(function(){if(state!==\"resolved\"||!stream){return;}videoRef.current.srcObject=stream;videoRef.current.play();},[state,stream]);var handleDetectFaces=function handleDetectFaces(){var model,predictions;return _regeneratorRuntime.async(function handleDetectFaces$(_context){while(1){switch(_context.prev=_context.next){case 0:setIsPredicting(true);_context.next=3;return _regeneratorRuntime.awrap(blazeface.load());case 3:model=_context.sent;_context.next=6;return _regeneratorRuntime.awrap(model.estimateFaces(videoRef.current));case 6:predictions=_context.sent;setConfidenceScore(null);if(predictions.length>0){predictions.forEach(function(prediction){console.log(prediction);setConfidenceScore(prediction.probability[0]);});}setIsPredicting(false);case 10:case\"end\":return _context.stop();}}},null,null,null,Promise);};if(state===\"pending\"){return React.createElement(IndefiniteLoading,{message:\"Video\"});}if(state===\"rejected\"){return React.createElement(\"p\",null,\"Error \",state);}return React.createElement(React.Fragment,null,React.createElement(Box,{mt:2,mb:10},React.createElement(Card,{variant:\"outlined\"},React.createElement(CardHeader,{title:\"User Status\"}),React.createElement(CardContent,null,React.createElement(Box,{mb:1},React.createElement(ListItem,{disableGutters:true},confidenceScore>=0.8&&React.createElement(ListItemAvatar,null,React.createElement(StyledBadge,{overlap:\"circle\",anchorOrigin:{vertical:\"bottom\",horizontal:\"right\"},variant:\"dot\"},React.createElement(Avatar,{src:user.photoURL,alt:user.displayName})))||React.createElement(ListItemAvatar,null,React.createElement(Avatar,{src:user.photoURL,alt:user.displayName})),React.createElement(ListItemText,{primary:user.isAnonymous&&\"Anonymous User\"||user.displayName,secondary:React.createElement(React.Fragment,null,\"Confidence score user is online:\",confidenceScore&&React.createElement(React.Fragment,null,\" \",confidenceScore.toFixed(2)*100,\"%\"))}))),React.createElement(Box,{mb:1},stream&&React.createElement(React.Fragment,null,React.createElement(\"video\",{className:classes.video,ref:videoRef,autoPlay:true,playsInline:true,muted:true}),React.createElement(ReactInterval,{timeout:2600,enabled:true,callback:handleDetectFaces})))))));};export default TensorFlow;","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/src/components/TensorFlowPage/TensorFlow.js"],"names":["React","useEffect","useState","useRef","ReactInterval","useUserMedia","blazeface","Box","Badge","Avatar","Card","CardContent","CardHeader","ListItem","ListItemText","ListItemAvatar","makeStyles","withStyles","IndefiniteLoading","useStyles","theme","root","width","video","constraints","audio","StyledBadge","badge","backgroundColor","color","boxShadow","palette","background","paper","position","top","left","height","borderRadius","animation","border","content","transform","opacity","TensorFlow","user","classes","isPredicting","setIsPredicting","confidenceScore","setConfidenceScore","state","stream","videoRef","current","srcObject","play","handleDetectFaces","load","model","estimateFaces","predictions","length","forEach","prediction","console","log","probability","vertical","horizontal","photoURL","displayName","isAnonymous","toFixed"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\r\nimport ReactInterval from \"react-interval\"\r\nimport useUserMedia from \"react-use-user-media\"\r\nimport * as blazeface from \"@tensorflow-models/blazeface\"\r\n\r\nimport {\r\n  Box,\r\n  Badge,\r\n  Avatar,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n} from \"@material-ui/core\"\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\"\r\n\r\nimport IndefiniteLoading from \"src/components/loading/indefiniteLoading\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  video: { width: \"100%\" },\r\n}))\r\n\r\nconst constraints = { video: true, audio: false }\r\n\r\nconst StyledBadge = withStyles(theme => ({\r\n  badge: {\r\n    backgroundColor: \"#44b700\",\r\n    color: \"#44b700\",\r\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n    \"&::after\": {\r\n      position: \"absolute\",\r\n      top: 0,\r\n      left: 0,\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      borderRadius: \"50%\",\r\n      animation: \"$ripple 1.2s infinite ease-in-out\",\r\n      border: \"1px solid currentColor\",\r\n      content: '\"\"',\r\n    },\r\n  },\r\n  \"@keyframes ripple\": {\r\n    \"0%\": {\r\n      transform: \"scale(.8)\",\r\n      opacity: 1,\r\n    },\r\n    \"100%\": {\r\n      transform: \"scale(2.4)\",\r\n      opacity: 0,\r\n    },\r\n  },\r\n}))(Badge)\r\n\r\nconst TensorFlow = ({ user }) => {\r\n  const classes = useStyles()\r\n\r\n  const [isPredicting, setIsPredicting] = useState(false)\r\n  const [confidenceScore, setConfidenceScore] = useState()\r\n\r\n  const { state, stream } = useUserMedia(constraints)\r\n  const videoRef = useRef()\r\n\r\n  useEffect(() => {\r\n    if (state !== \"resolved\" || !stream) {\r\n      return\r\n    }\r\n\r\n    videoRef.current.srcObject = stream\r\n    videoRef.current.play()\r\n  }, [state, stream])\r\n\r\n  const handleDetectFaces = async () => {\r\n    setIsPredicting(true)\r\n\r\n    const model = await blazeface.load()\r\n\r\n    const predictions = await model.estimateFaces(videoRef.current)\r\n    setConfidenceScore(null)\r\n    if (predictions.length > 0) {\r\n      predictions.forEach(prediction => {\r\n        console.log(prediction)\r\n        setConfidenceScore(prediction.probability[0])\r\n      })\r\n    }\r\n    setIsPredicting(false)\r\n  }\r\n\r\n  if (state === \"pending\") {\r\n    return <IndefiniteLoading message=\"Video\" />\r\n  }\r\n\r\n  if (state === \"rejected\") {\r\n    return <p>Error {state}</p>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box mt={2} mb={10}>\r\n        <Card variant=\"outlined\">\r\n          <CardHeader title=\"User Status\" />\r\n          <CardContent>\r\n            <Box mb={1}>\r\n              <ListItem disableGutters>\r\n                {(confidenceScore >= 0.8 && (\r\n                  <ListItemAvatar>\r\n                    <StyledBadge\r\n                      overlap=\"circle\"\r\n                      anchorOrigin={{\r\n                        vertical: \"bottom\",\r\n                        horizontal: \"right\",\r\n                      }}\r\n                      variant=\"dot\"\r\n                    >\r\n                      <Avatar src={user.photoURL} alt={user.displayName} />\r\n                    </StyledBadge>\r\n                  </ListItemAvatar>\r\n                )) || (\r\n                  <ListItemAvatar>\r\n                    <Avatar src={user.photoURL} alt={user.displayName} />\r\n                  </ListItemAvatar>\r\n                )}\r\n                <ListItemText\r\n                  primary={\r\n                    (user.isAnonymous && \"Anonymous User\") || user.displayName\r\n                  }\r\n                  secondary={\r\n                    <>\r\n                      Confidence score user is online:\r\n                      {confidenceScore && (\r\n                        <> {confidenceScore.toFixed(2) * 100}%</>\r\n                      )}\r\n                    </>\r\n                  }\r\n                />\r\n              </ListItem>\r\n            </Box>\r\n            <Box mb={1}>\r\n              {stream && (\r\n                <>\r\n                  <video\r\n                    className={classes.video}\r\n                    ref={videoRef}\r\n                    autoPlay\r\n                    playsInline\r\n                    muted\r\n                  />\r\n                  <ReactInterval\r\n                    timeout={2600}\r\n                    enabled={true}\r\n                    callback={handleDetectFaces}\r\n                  />\r\n                </>\r\n              )}\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\nexport default TensorFlow\r\n"]},"metadata":{},"sourceType":"module"}