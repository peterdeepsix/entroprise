{"ast":null,"code":"'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}import EmitterSubscription from\"./EmitterSubscription\";import EventSubscriptionVendor from\"./EventSubscriptionVendor\";import emptyFunction from'fbjs/lib/emptyFunction';import invariant from'fbjs/lib/invariant';var EventEmitter=function(){function EventEmitter(subscriber){_classCallCheck(this,EventEmitter);this._subscriber=subscriber||new EventSubscriptionVendor();}EventEmitter.prototype.addListener=function addListener(eventType,listener,context){return this._subscriber.addSubscription(eventType,new EmitterSubscription(this,this._subscriber,listener,context));};EventEmitter.prototype.once=function once(eventType,listener,context){var _this=this;return this.addListener(eventType,function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this.removeCurrentListener();listener.apply(context,args);});};EventEmitter.prototype.removeAllListeners=function removeAllListeners(eventType){this._subscriber.removeAllSubscriptions(eventType);};EventEmitter.prototype.removeCurrentListener=function removeCurrentListener(){invariant(!!this._currentSubscription,'Not in an emitting cycle; there is no current subscription');this.removeSubscription(this._currentSubscription);};EventEmitter.prototype.removeSubscription=function removeSubscription(subscription){invariant(subscription.emitter===this,'Subscription does not belong to this emitter.');this._subscriber.removeSubscription(subscription);};EventEmitter.prototype.listeners=function listeners(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);return subscriptions?subscriptions.filter(emptyFunction.thatReturnsTrue).map(function(subscription){return subscription.listener;}):[];};EventEmitter.prototype.emit=function emit(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription){this._currentSubscription=subscription;subscription.listener.apply(subscription.context,Array.prototype.slice.call(arguments,1));}}this._currentSubscription=null;}};EventEmitter.prototype.removeListener=function removeListener(eventType,listener){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener===listener){subscription.remove();}}}};return EventEmitter;}();export default EventEmitter;","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/node_modules/react-web-gifted-chat/node_modules/react-native-web/dist/vendor/react-native/emitter/EventEmitter.js"],"names":["_classCallCheck","instance","Constructor","TypeError","EmitterSubscription","EventSubscriptionVendor","emptyFunction","invariant","EventEmitter","subscriber","_subscriber","prototype","addListener","eventType","listener","context","addSubscription","once","_this","_len","arguments","length","args","Array","_key","removeCurrentListener","apply","removeAllListeners","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","thatReturnsTrue","map","emit","i","l","slice","call","removeListener","remove"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule EventEmitter\n * @noflow\n * @typecheck\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport EmitterSubscription from './EmitterSubscription';\nimport EventSubscriptionVendor from './EventSubscriptionVendor';\n\nimport emptyFunction from 'fbjs/lib/emptyFunction';\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\n\nvar EventEmitter = function () {\n\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  EventEmitter.prototype.addListener = function addListener(eventType, listener, context) {\n\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  };\n\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  EventEmitter.prototype.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  };\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n\n\n  EventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n\n\n  EventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  };\n\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n\n\n  EventEmitter.prototype.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n    this._subscriber.removeSubscription(subscription);\n  };\n\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n\n\n  EventEmitter.prototype.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  };\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n\n\n  EventEmitter.prototype.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n      this._currentSubscription = null;\n    }\n  };\n\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n\n\n  EventEmitter.prototype.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"]},"metadata":{},"sourceType":"module"}