{"ast":null,"code":"'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}import invariant from'fbjs/lib/invariant';var EventSubscriptionVendor=function(){function EventSubscriptionVendor(){_classCallCheck(this,EventSubscriptionVendor);this._subscriptionsForType={};this._currentSubscription=null;}EventSubscriptionVendor.prototype.addSubscription=function addSubscription(eventType,subscription){invariant(subscription.subscriber===this,'The subscriber of the subscription is incorrectly set.');if(!this._subscriptionsForType[eventType]){this._subscriptionsForType[eventType]=[];}var key=this._subscriptionsForType[eventType].length;this._subscriptionsForType[eventType].push(subscription);subscription.eventType=eventType;subscription.key=key;return subscription;};EventSubscriptionVendor.prototype.removeAllSubscriptions=function removeAllSubscriptions(eventType){if(eventType===undefined){this._subscriptionsForType={};}else{delete this._subscriptionsForType[eventType];}};EventSubscriptionVendor.prototype.removeSubscription=function removeSubscription(subscription){var eventType=subscription.eventType;var key=subscription.key;var subscriptionsForType=this._subscriptionsForType[eventType];if(subscriptionsForType){delete subscriptionsForType[key];}};EventSubscriptionVendor.prototype.getSubscriptionsForType=function getSubscriptionsForType(eventType){return this._subscriptionsForType[eventType];};return EventSubscriptionVendor;}();export default EventSubscriptionVendor;","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/node_modules/react-web-gifted-chat/node_modules/react-native-web/dist/vendor/react-native/emitter/EventSubscriptionVendor.js"],"names":["_classCallCheck","instance","Constructor","TypeError","invariant","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","prototype","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","undefined","removeSubscription","subscriptionsForType","getSubscriptionsForType"],"mappings":"AASA,aAEA,QAASA,CAAAA,eAAT,CAAyBC,QAAzB,CAAmCC,WAAnC,CAAgD,CAAE,GAAI,EAAED,QAAQ,WAAYC,CAAAA,WAAtB,CAAJ,CAAwC,CAAE,KAAM,IAAIC,CAAAA,SAAJ,CAAc,mCAAd,CAAN,CAA2D,CAAE,CAEzJ,MAAOC,CAAAA,SAAP,KAAsB,oBAAtB,CAMA,GAAIC,CAAAA,uBAAuB,CAAG,UAAY,CACxC,QAASA,CAAAA,uBAAT,EAAmC,CACjCL,eAAe,CAAC,IAAD,CAAOK,uBAAP,CAAf,CAEA,KAAKC,qBAAL,CAA6B,EAA7B,CACA,KAAKC,oBAAL,CAA4B,IAA5B,CACD,CAUDF,uBAAuB,CAACG,SAAxB,CAAkCC,eAAlC,CAAoD,QAASA,CAAAA,eAAT,CAAyBC,SAAzB,CAAoCC,YAApC,CAAkD,CACpGP,SAAS,CAACO,YAAY,CAACC,UAAb,GAA4B,IAA7B,CAAmC,wDAAnC,CAAT,CACA,GAAI,CAAC,KAAKN,qBAAL,CAA2BI,SAA3B,CAAL,CAA4C,CAC1C,KAAKJ,qBAAL,CAA2BI,SAA3B,EAAwC,EAAxC,CACD,CACD,GAAIG,CAAAA,GAAG,CAAG,KAAKP,qBAAL,CAA2BI,SAA3B,EAAsCI,MAAhD,CACA,KAAKR,qBAAL,CAA2BI,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C,EACAA,YAAY,CAACD,SAAb,CAAyBA,SAAzB,CACAC,YAAY,CAACE,GAAb,CAAmBA,GAAnB,CACA,MAAOF,CAAAA,YAAP,CACD,CAVD,CAoBAN,uBAAuB,CAACG,SAAxB,CAAkCQ,sBAAlC,CAA2D,QAASA,CAAAA,sBAAT,CAAgCN,SAAhC,CAA2C,CACpG,GAAIA,SAAS,GAAKO,SAAlB,CAA6B,CAC3B,KAAKX,qBAAL,CAA6B,EAA7B,CACD,CAFD,IAEO,CACL,MAAO,MAAKA,qBAAL,CAA2BI,SAA3B,CAAP,CACD,CACF,CAND,CAgBAL,uBAAuB,CAACG,SAAxB,CAAkCU,kBAAlC,CAAuD,QAASA,CAAAA,kBAAT,CAA4BP,YAA5B,CAA0C,CAC/F,GAAID,CAAAA,SAAS,CAAGC,YAAY,CAACD,SAA7B,CACA,GAAIG,CAAAA,GAAG,CAAGF,YAAY,CAACE,GAAvB,CAEA,GAAIM,CAAAA,oBAAoB,CAAG,KAAKb,qBAAL,CAA2BI,SAA3B,CAA3B,CACA,GAAIS,oBAAJ,CAA0B,CACxB,MAAOA,CAAAA,oBAAoB,CAACN,GAAD,CAA3B,CACD,CACF,CARD,CAwBAR,uBAAuB,CAACG,SAAxB,CAAkCY,uBAAlC,CAA4D,QAASA,CAAAA,uBAAT,CAAiCV,SAAjC,CAA4C,CACtG,MAAO,MAAKJ,qBAAL,CAA2BI,SAA3B,CAAP,CACD,CAFD,CAIA,MAAOL,CAAAA,uBAAP,CACD,CAjF6B,EAA9B,CAmFA,cAAeA,CAAAA,uBAAf","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule EventSubscriptionVendor\n * \n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    var key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  };\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n\n\n  EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  };\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n\n\n  EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  };\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n\n\n  EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;"]},"metadata":{},"sourceType":"module"}