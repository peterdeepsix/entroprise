{"ast":null,"code":"import{apiRunner}from\"./api-runner-browser\";if(window.location.protocol!==\"https:\"&&window.location.hostname!==\"localhost\"){console.error(\"Service workers can only be used over HTTPS, or on localhost for development\");}else if(\"serviceWorker\"in navigator){navigator.serviceWorker.register(__BASE_PATH__+\"/sw.js\").then(function(reg){reg.addEventListener(\"updatefound\",function(){apiRunner(\"onServiceWorkerUpdateFound\",{serviceWorker:reg});var installingWorker=reg.installing;console.log(\"installingWorker\",installingWorker);installingWorker.addEventListener(\"statechange\",function(){switch(installingWorker.state){case\"installed\":if(navigator.serviceWorker.controller){window.___swUpdated=true;apiRunner(\"onServiceWorkerUpdateReady\",{serviceWorker:reg});if(window.___failedResources){console.log(\"resources failed, SW updated - reloading\");window.location.reload();}}else{console.log(\"Content is now available offline!\");apiRunner(\"onServiceWorkerInstalled\",{serviceWorker:reg});}break;case\"redundant\":console.error(\"The installing service worker became redundant.\");apiRunner(\"onServiceWorkerRedundant\",{serviceWorker:reg});break;case\"activated\":apiRunner(\"onServiceWorkerActive\",{serviceWorker:reg});break;}});});}).catch(function(e){console.error(\"Error during service worker registration:\",e);});}","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/.cache/register-service-worker.js"],"names":["apiRunner","window","location","protocol","hostname","console","error","navigator","serviceWorker","register","__BASE_PATH__","then","reg","addEventListener","installingWorker","installing","log","state","controller","___swUpdated","___failedResources","reload","catch","e"],"mappings":"AAAA,OAASA,SAAT,4BAEA,GACEC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,aACAF,MAAM,CAACC,QAAP,CAAgBE,QAAhB,cAFF,CAGE,CACAC,OAAO,CAACC,KAAR,iFAGD,CAPD,IAOO,IAAI,iBAAmBC,CAAAA,SAAvB,CAAkC,CACvCA,SAAS,CAACC,aAAV,CACGC,QADH,CACeC,aADf,WAEGC,IAFH,CAEQ,SAASC,GAAT,CAAc,CAClBA,GAAG,CAACC,gBAAJ,eAAoC,UAAM,CACxCb,SAAS,8BAA+B,CAAEQ,aAAa,CAAEI,GAAjB,CAA/B,CAAT,CAGA,GAAME,CAAAA,gBAAgB,CAAGF,GAAG,CAACG,UAA7B,CACAV,OAAO,CAACW,GAAR,oBAAgCF,gBAAhC,EACAA,gBAAgB,CAACD,gBAAjB,eAAiD,UAAM,CACrD,OAAQC,gBAAgB,CAACG,KAAzB,EACE,gBACE,GAAIV,SAAS,CAACC,aAAV,CAAwBU,UAA5B,CAAwC,CAKtCjB,MAAM,CAACkB,YAAP,CAAsB,IAAtB,CAEAnB,SAAS,8BAA+B,CAAEQ,aAAa,CAAEI,GAAjB,CAA/B,CAAT,CAGA,GAAIX,MAAM,CAACmB,kBAAX,CAA+B,CAC7Bf,OAAO,CAACW,GAAR,6CACAf,MAAM,CAACC,QAAP,CAAgBmB,MAAhB,GACD,CACF,CAdD,IAcO,CAGLhB,OAAO,CAACW,GAAR,sCAKAhB,SAAS,4BAA6B,CAAEQ,aAAa,CAAEI,GAAjB,CAA7B,CAAT,CACD,CACD,MAEF,gBACEP,OAAO,CAACC,KAAR,oDACAN,SAAS,4BAA6B,CAAEQ,aAAa,CAAEI,GAAjB,CAA7B,CAAT,CACA,MAEF,gBACEZ,SAAS,yBAA0B,CAAEQ,aAAa,CAAEI,GAAjB,CAA1B,CAAT,CACA,MAnCJ,CAqCD,CAtCD,EAuCD,CA7CD,EA8CD,CAjDH,EAkDGU,KAlDH,CAkDS,SAASC,CAAT,CAAY,CACjBlB,OAAO,CAACC,KAAR,6CAA2DiB,CAA3D,EACD,CApDH,EAqDD","sourcesContent":["import { apiRunner } from \"./api-runner-browser\"\n\nif (\n  window.location.protocol !== `https:` &&\n  window.location.hostname !== `localhost`\n) {\n  console.error(\n    `Service workers can only be used over HTTPS, or on localhost for development`\n  )\n} else if (`serviceWorker` in navigator) {\n  navigator.serviceWorker\n    .register(`${__BASE_PATH__}/sw.js`)\n    .then(function(reg) {\n      reg.addEventListener(`updatefound`, () => {\n        apiRunner(`onServiceWorkerUpdateFound`, { serviceWorker: reg })\n        // The updatefound event implies that reg.installing is set; see\n        // https://w3c.github.io/ServiceWorker/#service-worker-registration-updatefound-event\n        const installingWorker = reg.installing\n        console.log(`installingWorker`, installingWorker)\n        installingWorker.addEventListener(`statechange`, () => {\n          switch (installingWorker.state) {\n            case `installed`:\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and the fresh content will\n                // have been added to the cache.\n\n                // We set a flag so Gatsby Link knows to refresh the page on next navigation attempt\n                window.___swUpdated = true\n                // We call the onServiceWorkerUpdateReady API so users can show update prompts.\n                apiRunner(`onServiceWorkerUpdateReady`, { serviceWorker: reg })\n\n                // If resources failed for the current page, reload.\n                if (window.___failedResources) {\n                  console.log(`resources failed, SW updated - reloading`)\n                  window.location.reload()\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a \"Content is cached for offline use.\" message.\n                console.log(`Content is now available offline!`)\n\n                // Post to service worker that install is complete.\n                // Delay to allow time for the event listener to be added --\n                // otherwise fetch is called too soon and resources aren't cached.\n                apiRunner(`onServiceWorkerInstalled`, { serviceWorker: reg })\n              }\n              break\n\n            case `redundant`:\n              console.error(`The installing service worker became redundant.`)\n              apiRunner(`onServiceWorkerRedundant`, { serviceWorker: reg })\n              break\n\n            case `activated`:\n              apiRunner(`onServiceWorkerActive`, { serviceWorker: reg })\n              break\n          }\n        })\n      })\n    })\n    .catch(function(e) {\n      console.error(`Error during service worker registration:`, e)\n    })\n}\n"]},"metadata":{},"sourceType":"module"}