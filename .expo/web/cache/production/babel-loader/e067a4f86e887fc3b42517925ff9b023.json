{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _extends from\"@babel/runtime/helpers/extends\";import React,{useEffect,useRef,useState}from\"react\";import Video,{ConnectOptions,LocalTrack,Room}from\"twilio-video\";import{makeStyles}from\"@material-ui/core/styles\";import{Box,Typography,Card,CardHeader,CardContent,Button,Dialog,AppBar,Toolbar,IconButton,Slide}from\"@material-ui/core\";import CloseIcon from\"@material-ui/icons/Close\";var useStyles=makeStyles(function(theme){return{appBar:{position:\"relative\"},title:{marginLeft:theme.spacing(2),flex:1}};});var Transition=React.forwardRef(function Transition(props,ref){return React.createElement(Slide,_extends({direction:\"up\",ref:ref},props));});var RoomDialog=function RoomDialog(){var classes=useStyles();var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),isDialogOpen=_React$useState2[0],setIsDialogOpen=_React$useState2[1];var _useState=useState(),_useState2=_slicedToArray(_useState,2),roomName=_useState2[0],setRoomName=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isConnecting=_useState4[0],setIsConnecting=_useState4[1];var disconnectHandlerRef=useRef(null);var localTracksRef=[];var handleClickOpen=function handleClickOpen(){setRoomName(\"testRoom\");setIsDialogOpen(true);};var handleDialogClose=function handleDialogClose(){setIsDialogOpen(false);};Video.connect(\"$TOKEN\",{name:\"testRoom\"}).then(function(room){console.log('Connected to Room \"%s\"',room.name);room.on(\"participantConnected\",console.log(\"participantConnected\"));room.on(\"participantDisconnected\",console.log(\"participantDisconnected\"));});return React.createElement(React.Fragment,null,React.createElement(Button,{variant:\"outlined\",color:\"primary\",onClick:handleClickOpen},\"Open Room\"),React.createElement(Dialog,{fullScreen:true,open:isDialogOpen,onClose:handleDialogClose,TransitionComponent:Transition},React.createElement(AppBar,{className:classes.appBar},React.createElement(Toolbar,null,React.createElement(IconButton,{edge:\"start\",color:\"inherit\",onClick:handleDialogClose,\"aria-label\":\"close\"},React.createElement(CloseIcon,null)),React.createElement(Typography,{variant:\"h6\",className:classes.title},\"Room\"),React.createElement(Button,{autoFocus:true,color:\"inherit\",onClick:handleDialogClose},\"Close Room\"))),\"Room Content\"));};export default RoomDialog;","map":{"version":3,"sources":["C:/Users/arnol/code/entroprise/src/components/ServicePage/RoomDialog.js"],"names":["React","useEffect","useRef","useState","Video","ConnectOptions","LocalTrack","Room","makeStyles","Box","Typography","Card","CardHeader","CardContent","Button","Dialog","AppBar","Toolbar","IconButton","Slide","CloseIcon","useStyles","theme","appBar","position","title","marginLeft","spacing","flex","Transition","forwardRef","props","ref","RoomDialog","classes","isDialogOpen","setIsDialogOpen","roomName","setRoomName","isConnecting","setIsConnecting","disconnectHandlerRef","localTracksRef","handleClickOpen","handleDialogClose","connect","name","then","room","console","log","on"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\r\nimport Video, { ConnectOptions, LocalTrack, Room } from \"twilio-video\"\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Button,\r\n  Dialog,\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Slide,\r\n} from \"@material-ui/core\"\r\nimport CloseIcon from \"@material-ui/icons/Close\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}))\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />\r\n})\r\n\r\nconst RoomDialog = () => {\r\n  const classes = useStyles()\r\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false)\r\n\r\n  const [roomName, setRoomName] = useState()\r\n  const [isConnecting, setIsConnecting] = useState(false)\r\n  const disconnectHandlerRef = useRef(null)\r\n  const localTracksRef = []\r\n\r\n  const handleClickOpen = () => {\r\n    setRoomName(\"testRoom\")\r\n    setIsDialogOpen(true)\r\n  }\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false)\r\n  }\r\n\r\n  Video.connect(\"$TOKEN\", { name: \"testRoom\" }).then(room => {\r\n    console.log('Connected to Room \"%s\"', room.name)\r\n    room.on(\"participantConnected\", console.log(\"participantConnected\"))\r\n    room.on(\"participantDisconnected\", console.log(\"participantDisconnected\"))\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Open Room\r\n      </Button>\r\n      <Dialog\r\n        fullScreen\r\n        open={isDialogOpen}\r\n        onClose={handleDialogClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={handleDialogClose}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Room\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={handleDialogClose}>\r\n              Close Room\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        Room Content\r\n      </Dialog>\r\n    </>\r\n  )\r\n}\r\nexport default RoomDialog\r\n"]},"metadata":{},"sourceType":"module"}